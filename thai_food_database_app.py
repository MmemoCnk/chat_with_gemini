# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API
import streamlit as st
import pandas as pd
import os
import json
import re
from io import StringIO
import requests
import google.generativeai as genai

st.set_page_config(
    page_title="Thai Food Chatbot with Gemini",
    page_icon="üçú",
    layout="wide"
)

# Initialize session state for storing dataframes
if 'dataframes' not in st.session_state:
    st.session_state.dataframes = {}
if 'data_dicts' not in st.session_state:
    st.session_state.data_dicts = {}
if 'file_uploaded' not in st.session_state:
    st.session_state.file_uploaded = False
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'api_key_set' not in st.session_state:
    st.session_state.api_key_set = False

# Function to initialize Gemini API
def initialize_gemini_api(api_key):
    try:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ API key
        genai.configure(api_key=api_key)
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á model
        model = genai.GenerativeModel('gemini-pro')
        return model, True
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡πÑ‡∏î‡πâ: {str(e)}")
        return None, False

# Function to determine if file is a data dictionary
def is_data_dict(filename):
    return 'data_dict' in filename

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
def create_test_data():
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
    dishes_data = {
        'dish_id': [1, 2, 3],
        'dish_name': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢'],
        'dish_type': ['‡∏ï‡πâ‡∏°', '‡πÅ‡∏Å‡∏á', '‡∏ú‡∏±‡∏î']
    }
    dishes_df = pd.DataFrame(dishes_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
    ingredients_data = {
        'ingredient_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'ingredient_name': ['‡∏Å‡∏∏‡πâ‡∏á', '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏ú‡∏≤', '‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π', '‡∏Ç‡πà‡∏≤', 
                            '‡πÑ‡∏Å‡πà', '‡∏Å‡∏∞‡∏ó‡∏¥', '‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á', '‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î', '‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢'],
        'calories_per_100g': [100, 200, 5, 40, 60, 120, 230, 180, 30, 350],
        'price_per_unit': [300, 80, 20, 100, 50, 80, 60, 90, 20, 40],
        'unit': ['‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Ç‡∏ß‡∏î', '‡∏Ç‡∏ß‡∏î', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 
                '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á', '‡∏Ç‡∏ß‡∏î', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°']
    }
    ingredients_df = pd.DataFrame(ingredients_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    recipe_data = {
        'dish_id': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3],
        'ingredient_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 10, 1, 3, 4],
        'amount': [300, 2, 3, 5, 50, 500, 400, 3, 5, 3, 200, 100, 2, 2],
        'unit': ['‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÄ‡∏°‡πá‡∏î', '‡∏Å‡∏£‡∏±‡∏°', 
                '‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÉ‡∏ö', '‡πÄ‡∏°‡πá‡∏î', 
                '‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÄ‡∏°‡πá‡∏î'],
        'notes': ['', '', '', '‡∏™‡∏î', '‡∏´‡∏±‡πà‡∏ô‡πÅ‡∏ß‡πà‡∏ô', '', '', '', '‡∏â‡∏µ‡∏Å', '', '', '', '', '']
    }
    recipe_df = pd.DataFrame(recipe_data)
    
    return dishes_df, ingredients_df, recipe_df

# Helper function to extract dish name from question
def extract_dish_name(question):
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    original_question = question
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    question = question.lower().replace('?', '').replace('‡πÜ', '').strip()
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
    if "‡∏£‡∏≤‡∏Ñ‡∏≤" in question and "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö" in question:
        # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ
        before_samrab = question.split("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö")[0].strip()
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        if "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥" in before_samrab:
            dish_name = before_samrab.replace("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥", "").strip()
            return dish_name
        elif "‡∏£‡∏≤‡∏Ñ‡∏≤" in before_samrab and "‡∏ó‡∏≥" in before_samrab:
            dish_name = before_samrab.split("‡∏ó‡∏≥")[1].strip()
            return dish_name
        elif "‡∏Ç‡∏≠‡∏á" in before_samrab:
            dish_name = before_samrab.split("‡∏Ç‡∏≠‡∏á")[1].strip()
            return dish_name
        else:
            parts = before_samrab.split()
            if len(parts) > 1:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ñ‡∏≥
                return ' '.join(parts[1:])  # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å (‡∏£‡∏≤‡∏Ñ‡∏≤) ‡∏≠‡∏≠‡∏Å
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    if "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á" in question:
        return question.split("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á")[1].strip()
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°
    if "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á" in question:
        parts = question.split("‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á")[1].strip()
        # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" ‡∏≠‡∏≠‡∏Å ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in parts:
            parts = parts.split("‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á")[0].strip()
        return parts
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°" ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    if "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°" in question and "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in question:
        # ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°" ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" ‡∏≠‡∏≠‡∏Å
        parts = question.split("‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°")[1].strip()
        if "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in parts:
            parts = parts.split("‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á")[0].strip()
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏á" ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á "‡∏Ç‡∏≠‡∏á"
        if "‡∏Ç‡∏≠‡∏á" in parts:
            return parts.split("‡∏Ç‡∏≠‡∏á")[1].strip()
        return parts
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà" ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    if "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà" in question:
        # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà" ‡∏≠‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        text = question.replace("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà", "").strip()
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏á" ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á "‡∏Ç‡∏≠‡∏á"
        if "‡∏Ç‡∏≠‡∏á" in text:
            return text.split("‡∏Ç‡∏≠‡∏á")[1].strip()
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 5: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
    if "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á" in question:
        return question.split("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á")[1].strip()
    
    if "‡∏£‡∏≤‡∏Ñ‡∏≤" in question and "‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà" in question:
        text = question.replace("‡∏£‡∏≤‡∏Ñ‡∏≤", "").replace("‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà", "").strip()
        if "‡∏Ç‡∏≠‡∏á" in text:
            return text.split("‡∏Ç‡∏≠‡∏á")[1].strip()
    
    # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô fallback
    patterns = [
        r'(?:‡∏Ç‡∏≠‡∏á|about|of|for|‡∏≠‡∏≤‡∏´‡∏≤‡∏£|‡∏ä‡∏∑‡πà‡∏≠|‡πÄ‡∏°‡∏ô‡∏π)\s+([^\?\.]+?)(?:\s+and|\s*$|\s+‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö|\s+‡∏£‡∏≤‡∏Ñ‡∏≤|\s+‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà|\s+‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£)',
        r'(?:‡∏ó‡∏≥)([^\?\.]+?)(?:\s+and|\s*$|\s+‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö|\s+‡∏¢‡∏±‡∏á‡πÑ‡∏á|\s+‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£)',
        r'([^\?\.]+?)(?:\s+‡∏°‡∏µ|\s+‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢|\s+‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á|\s+‡∏£‡∏≤‡∏Ñ‡∏≤|\s+‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, question)
        if match:
            return match.group(1).strip()
            
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏á", "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà" ‡∏Ø‡∏•‡∏Ø)
    # ‡πÄ‡∏ä‡πà‡∏ô "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    if len(question.split()) <= 3:  # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏≥
        return question.strip()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    print(f"DEBUG - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {original_question}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return None

# Helper function to provide cooking method hint based on dish type
def get_cooking_method_hint(dish_type):
    cooking_hints = {
        '‡∏ï‡πâ‡∏°': '‡∏ï‡πâ‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÑ‡∏õ ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö',
        '‡πÅ‡∏Å‡∏á': '‡∏ú‡∏±‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏≠‡∏° ‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏∞‡∏ó‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πâ‡∏≥ ‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏Å ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö',
        '‡∏ú‡∏±‡∏î': '‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏∞‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≠‡∏ô ‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏±‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö',
        '‡∏ó‡∏≠‡∏î': '‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏∞‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≠‡∏ô ‡∏ó‡∏≠‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏Å‡∏£‡∏≠‡∏ö',
        '‡∏¢‡∏≥': '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ñ‡∏•‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏•‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏¢‡∏≥‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÄ‡∏ú‡πá‡∏î',
        '‡∏ô‡∏∂‡πà‡∏á': '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏´‡∏°‡πâ‡∏≠‡∏ô‡∏∂‡πà‡∏á ‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÑ‡∏õ‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏ô‡∏™‡∏∏‡∏Å',
        '‡∏ï‡∏∏‡πã‡∏ô': '‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏°‡πâ‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏∏‡πã‡∏ô‡πÑ‡∏ü‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô',
        '‡∏õ‡∏¥‡πâ‡∏á/‡∏¢‡πà‡∏≤‡∏á': '‡∏´‡∏°‡∏±‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å',
        '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å': '‡πÇ‡∏Ç‡∏•‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö'
    }
    
    return cooking_hints.get(dish_type, '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ')

# Function to generate Gemini prompt
def generate_gemini_prompt(question, dishes_df, ingredients_df, recipe_df):
    prompt = """
You are a Thai food expert with access to a database of Thai dishes, ingredients and recipes. 
Answer the following question based on the data provided below.

QUESTION: {question}

DATABASE STRUCTURE:
1. Thai Dishes:
{dishes_structure}

2. Ingredients:
{ingredients_structure}

3. Recipe Ingredients:
{recipe_structure}

DATABASE CONTENT:
1. Thai Dishes (First 5 rows):
{dishes_sample}

2. Ingredients (First 5 rows):
{ingredients_sample}

3. Recipe Ingredients (First 10 rows):
{recipe_sample}

Provide a thorough answer based on the data. Do not include any code in your response.
If you need to calculate something, perform the calculation yourself and provide the result.
If the information is not in the database, politely say so.
Always respond in Thai language.
"""
    
    # Fill in the template
    dishes_structure = "Not available" if dishes_df is None else dishes_df.dtypes.to_string()
    ingredients_structure = "Not available" if ingredients_df is None else ingredients_df.dtypes.to_string()
    recipe_structure = "Not available" if recipe_df is None else recipe_df.dtypes.to_string()
    
    dishes_sample = "Not available" if dishes_df is None else dishes_df.head(5).to_string()
    ingredients_sample = "Not available" if ingredients_df is None else ingredients_df.head(5).to_string()
    recipe_sample = "Not available" if recipe_df is None else recipe_df.head(10).to_string()
    
    formatted_prompt = prompt.format(
        question=question,
        dishes_structure=dishes_structure,
        ingredients_structure=ingredients_structure,
        recipe_structure=recipe_structure,
        dishes_sample=dishes_sample,
        ingredients_sample=ingredients_sample,
        recipe_sample=recipe_sample
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    if "calories" in question.lower() or "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ" in question:
        # Extract dish name from question
        dish_name_match = re.search(r'(?:of|for|about|‡∏Ç‡∏≠‡∏á)\s+(.+?)(?:\s+and|\s*$)', question)
        if dish_name_match:
            dish_name = dish_name_match.group(1).strip()
            
            analysis_guide = f"""
ANALYSIS GUIDE:
To calculate the calories of {dish_name}, you should:
1. Find the dish_id for "{dish_name}" in the thai_dishes dataframe
2. Use that dish_id to find all ingredients in recipe_ingredients dataframe
3. For each ingredient, look up its calories_per_100g in the ingredients dataframe
4. Calculate total calories based on the amount of each ingredient used
5. Convert units appropriately (e.g., spoons to grams)
6. Present the total calories and breakdown by main ingredients
"""
            formatted_prompt += "\n\n" + analysis_guide
    
    return formatted_prompt

# Function to get response from Gemini
def get_gemini_response(model, question, dishes_df, ingredients_df, recipe_df):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
        prompt = generate_gemini_prompt(question, dishes_df, ingredients_df, recipe_df)
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini API
        response = model.generate_content(prompt)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        return response.text
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini API: {str(e)}"

# Function to generate response (fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ API key)
def get_response_for_question(question, dishes_df, ingredients_df, recipe_df):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    dish_name = extract_dish_name(question)
    print(f"DEBUG - ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}, ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: {dish_name}")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    if "calories" in question.lower() or "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ" in question or "calorie" in question.lower():
        if dish_name:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å dataframe
            try:
                # ‡∏´‡∏≤ dish_id
                dish_data = dishes_df[dishes_df['dish_name'].str.contains(dish_name, case=False, na=False)]
                
                if not dish_data.empty:
                    dish_id = dish_data.iloc[0]['dish_id']
                    dish_name_full = dish_data.iloc[0]['dish_name']
                    
                    # ‡∏î‡∏∂‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    ingredients_used = recipe_df[recipe_df['dish_id'] == dish_id]
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                    total_calories = 0
                    ingredient_details = []
                    
                    for _, row in ingredients_used.iterrows():
                        ingredient_id = row['ingredient_id']
                        ingredient_data = ingredients_df[ingredients_df['ingredient_id'] == ingredient_id]
                        
                        if not ingredient_data.empty:
                            ingredient_name = ingredient_data.iloc[0]['ingredient_name']
                            calories = ingredient_data.iloc[0]['calories_per_100g']
                            
                            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                            try:
                                amount = float(row['amount'])
                            except:
                                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                                if str(row['amount']) == '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏î':
                                    amount = 50  # ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏î ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 50 ‡∏Å‡∏£‡∏±‡∏°
                                elif '/' in str(row['amount']):
                                    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1/2
                                    nums = str(row['amount']).split('/')
                                    amount = float(nums[0]) / float(nums[1])
                                else:
                                    amount = 10  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                            unit = row['unit']
                            if unit == '‡∏Å‡∏£‡∏±‡∏°':
                                ingredient_calories = (amount / 100) * float(calories)
                            elif unit in ['‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤']:
                                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≠‡∏ô
                                weight_per_spoon = 15 if unit == '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞' else 5
                                ingredient_calories = (amount * weight_per_spoon / 100) * float(calories)
                            else:
                                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
                                ingredient_calories = (amount / 10) * float(calories)
                                
                            total_calories += ingredient_calories
                            ingredient_details.append(f"{ingredient_name}: {round(ingredient_calories)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    response = f"""
{dish_name_full} ‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {round(total_calories)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏ô

‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å:
- {chr(10).join(['- ' + item for item in ingredient_details[:5]])}

‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á
                    """
                    return response
                else:
                    return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠ '{dish_name}' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                    
            except Exception as e:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"
        else:
            return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á'"
            
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°
    elif "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°" in question or "ingredients" in question.lower() or "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" in question:
        dish_name = extract_dish_name(question)
        if dish_name:
            try:
                # ‡∏´‡∏≤ dish_id
                dish_data = dishes_df[dishes_df['dish_name'].str.contains(dish_name, case=False, na=False)]
                
                if not dish_data.empty:
                    dish_id = dish_data.iloc[0]['dish_id']
                    dish_name_full = dish_data.iloc[0]['dish_name']
                    
                    # ‡∏î‡∏∂‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    ingredients_used = recipe_df[recipe_df['dish_id'] == dish_id]
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°
                    ingredients_list = []
                    
                    for _, row in ingredients_used.iterrows():
                        ingredient_id = row['ingredient_id']
                        ingredient_data = ingredients_df[ingredients_df['ingredient_id'] == ingredient_id]
                        
                        if not ingredient_data.empty:
                            ingredient_name = ingredient_data.iloc[0]['ingredient_name']
                            amount = row['amount']
                            unit = row['unit']
                            notes = row['notes'] if pd.notna(row['notes']) else ""
                            
                            ingredient_str = f"{ingredient_name} {amount} {unit}"
                            if notes:
                                ingredient_str += f" ({notes})"
                                
                            ingredients_list.append(ingredient_str)
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    response = f"""
‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á{dish_name_full}:

{chr(10).join(['- ' + item for item in ingredients_list])}

‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥: 
‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏ï‡πà‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ{dish_name_full}‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°
- {get_cooking_method_hint(dish_data.iloc[0]['dish_type'])}
                    """
                    return response
                else:
                    return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠ '{dish_name}' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            except Exception as e:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"
        else:
            return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏° ‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á'"
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
    elif "‡∏£‡∏≤‡∏Ñ‡∏≤" in question or "price" in question.lower() or "cost" in question.lower() or "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" in question:
        dish_name = extract_dish_name(question)
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        persons = 4  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö" in question and re.search(r'(\d+)\s*‡∏Ñ‡∏ô', question):
            match = re.search(r'(\d+)\s*‡∏Ñ‡∏ô', question)
            persons = int(match.group(1))
        
        print(f"DEBUG - ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤: '{question}', ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: '{dish_name}', ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô: {persons}")
        
        if dish_name:
            try:
                # ‡∏´‡∏≤ dish_id
                dish_data = dishes_df[dishes_df['dish_name'].str.contains(dish_name, case=False, na=False)]
                
                if not dish_data.empty:
                    dish_id = dish_data.iloc[0]['dish_id']
                    dish_name_full = dish_data.iloc[0]['dish_name']
                    
                    # ‡∏î‡∏∂‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    ingredients_used = recipe_df[recipe_df['dish_id'] == dish_id]
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                    total_cost = 0
                    main_ingredients = []
                    
                    for _, row in ingredients_used.iterrows():
                        ingredient_id = row['ingredient_id']
                        ingredient_data = ingredients_df[ingredients_df['ingredient_id'] == ingredient_id]
                        
                        if not ingredient_data.empty:
                            ingredient_name = ingredient_data.iloc[0]['ingredient_name']
                            price_per_unit = float(ingredient_data.iloc[0]['price_per_unit'])
                            unit_in_db = ingredient_data.iloc[0]['unit']
                            
                            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                            try:
                                amount = float(row['amount'])
                            except:
                                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                                if str(row['amount']) == '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏î':
                                    amount = 0.05  # ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏î ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 50 ‡∏°‡∏•. = 0.05 ‡∏•‡∏¥‡∏ï‡∏£
                                elif '/' in str(row['amount']):
                                    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1/2
                                    nums = str(row['amount']).split('/')
                                    amount = float(nums[0]) / float(nums[1])
                                else:
                                    amount = 0.1  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                            recipe_unit = row['unit']
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢
                            if '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°' in unit_in_db and '‡∏Å‡∏£‡∏±‡∏°' in recipe_unit:
                                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏±‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
                                unit_cost = (amount / 1000) * price_per_unit
                            elif '‡∏Ç‡∏ß‡∏î' in unit_in_db and '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞' in recipe_unit:
                                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤ 1 ‡∏Ç‡∏ß‡∏î (700ml) ‡∏°‡∏µ 46 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞ (15ml)
                                unit_cost = (amount / 46) * price_per_unit
                            elif '‡∏Ç‡∏ß‡∏î' in unit_in_db and '‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤' in recipe_unit:
                                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤ 1 ‡∏Ç‡∏ß‡∏î (700ml) ‡∏°‡∏µ 140 ‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤ (5ml)
                                unit_cost = (amount / 140) * price_per_unit
                            else:
                                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
                                unit_cost = (amount / 10) * price_per_unit
                                
                            total_cost += unit_cost
                            
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á
                            if unit_cost > 5:  # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ö‡∏≤‡∏ó
                                main_ingredients.append(f"{ingredient_name}: {round(unit_cost)} ‡∏ö‡∏≤‡∏ó")
                    
                    adjusted_cost = total_cost
                    if persons > 1:
                        # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á (economy of scale)
                        adjusted_cost = total_cost * (1 + (persons - 1) * 0.7) / persons
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    response = f"""
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥{dish_name_full} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {persons} ‡∏Ñ‡∏ô ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏∑‡∏≠ {round(adjusted_cost * persons)} ‡∏ö‡∏≤‡∏ó

‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á:
{chr(10).join(['- ' + item for item in main_ingredients[:5]])}

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: 
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
- ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤
                    """
                    return response
                else:
                    return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠ '{dish_name}' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            except Exception as e:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"
        else:
            return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á'"
    
    # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
    else:
        return f"""
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "{question}"

‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
1. ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á")
2. ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô")
3. ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4 ‡∏Ñ‡∏ô")

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """

# Main title
st.title("üçú Thai Food Chatbot with Gemini")

# Sidebar for API key input and file upload
with st.sidebar:
    st.header("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API")
    api_key = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key", type="password")
    use_gemini = st.checkbox("‡πÉ‡∏ä‡πâ Gemini API", value=False)
    
    if use_gemini and api_key:
        # Initialize Gemini API
        gemini_model, success = initialize_gemini_api(api_key= 'AIzaSyCJw_-6i3ffFdsx1FUXda0AIuen22U6BGE')
        if success:
            st.session_state.gemini_model = gemini_model
            st.session_state.api_key_set = True
            st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            st.session_state.api_key_set = False
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key")
    elif use_gemini and not api_key:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å API Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Gemini")
    
    st.header("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    uploaded_files = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV", type="csv", accept_multiple_files=True)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    use_sample_data = st.checkbox("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
    
    if use_sample_data:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
        dishes_df, ingredients_df, recipe_df = create_test_data()
        st.session_state.dataframes = {
            'thai_dishes.csv': dishes_df,
            'ingredients.csv': ingredients_df,
            'recipe_ingredients.csv': recipe_df
        }
        st.session_state.file_uploaded = True
        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    elif uploaded_files:
        for file in uploaded_files:
            try:
                # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                df = pd.read_csv(
                    file,
                    encoding='utf-8',  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô UTF-8
                    on_bad_lines='skip',  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                    low_memory=False,  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ low memory
                    dtype=str  # ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô
                )
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß
                for col in df.columns:
                    try:
                        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô string
                        df[col] = pd.to_numeric(df[col], errors='ignore')
                    except:
                        pass
                
                if is_data_dict(file.name):
                    st.session_state.data_dicts[file.name] = df
                    st.success(f"‡πÇ‡∏´‡∏•‡∏î Data Dictionary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file.name}")
                else:
                    st.session_state.dataframes[file.name] = df
                    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file.name}")
                    
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file.name}: {str(e)}")
                st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô...")
                
                try:
                    # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô CSV ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
                    stringio = StringIO(file.getvalue().decode("utf-8"))
                    lines = stringio.read().splitlines()
                    header = lines[0].split(",")
                    
                    data = []
                    for line in lines[1:]:
                        if line.strip():  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
                            values = line.split(",")
                            if len(values) == len(header):
                                data.append(values)
                    
                    df = pd.DataFrame(data, columns=header)
                    
                    if is_data_dict(file.name):
                        st.session_state.data_dicts[file.name] = df
                        st.success(f"‡πÇ‡∏´‡∏•‡∏î Data Dictionary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2): {file.name}")
                    else:
                        st.session_state.dataframes[file.name] = df
                        st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2): {file.name}")
                        
                except Exception as e2:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file.name} ‡πÑ‡∏î‡πâ: {str(e2)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        required_files = ['thai_dishes', 'ingredients', 'recipe_ingredients']
        has_all_required = True
        
        for req in required_files:
            found = False
            for filename in st.session_state.dataframes.keys():
                if req in filename:
                    found = True
                    break
            if not found:
                has_all_required = False
                st.warning(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {req}.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
        
        if has_all_required:
            st.session_state.file_uploaded = True
        else:
            st.session_state.file_uploaded = False

# Main content - Chat interface
if st.session_state.file_uploaded:
    # Get DataFrames
    dishes_df = None
    ingredients_df = None
    recipe_df = None
    
    for filename, df in st.session_state.dataframes.items():
        if isinstance(filename, str) and 'thai_dishes' in filename.lower():
            dishes_df = df
        elif isinstance(filename, str) and 'ingredients' in filename.lower() and 'recipe' not in filename.lower():
            ingredients_df = df
        elif isinstance(filename, str) and 'recipe' in filename.lower():
            recipe_df = df
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if dishes_df is None or ingredients_df is None or recipe_df is None:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        st.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (thai_dishes): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if dishes_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (ingredients): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if ingredients_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏° (recipe_ingredients): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if recipe_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        st.write("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
        for filename in st.session_state.dataframes.keys():
            st.write(f"- {filename}")
    else:
        # Display chat interface
        st.header("‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢")
        
        # Display chat history
        chat_container = st.container()
        with chat_container:
            for i, (q, a) in enumerate(st.session_state.chat_history):
                st.markdown(f"**‡∏Ñ‡∏∏‡∏ì**: {q}")
                st.markdown(f"**‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó**: {a}")
                if i < len(st.session_state.chat_history) - 1:
                    st.markdown("---")
        
        # Input for new question
        with st.form(key="question_form"):
            question = st.text_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢:", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á, ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4 ‡∏Ñ‡∏ô")
            submit_button = st.form_submit_button("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
            
            if submit_button and question:
                # Get response
                if dishes_df is not None and ingredients_df is not None and recipe_df is not None:
                    if st.session_state.api_key_set and 'gemini_model' in st.session_state:
                        # ‡πÉ‡∏ä‡πâ Gemini API
                        response = get_gemini_response(st.session_state.gemini_model, question, dishes_df, ingredients_df, recipe_df)
                    else:
                        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
                        response = get_response_for_question(question, dishes_df, ingredients_df, recipe_df)
                else:
                    response = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô"
                
                # Add to chat history
                st.session_state.chat_history.append((question, response))
                
                # Rerun to update chat display
                st.rerun()
        
        # Add option to clear chat history
        if st.button("‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"):
            st.session_state.chat_history = []
            st.rerun()

        # Add export chat history
        if st.download_button(
            label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
            data="\n\n".join([f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {q}\n\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {a}" for q, a in st.session_state.chat_history]),
            file_name="thai_food_chat_history.txt",
            mime="text/plain"
        ):
            st.success("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    st.write("‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
    st.write("1. thai_dishes.csv - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢")
    st.write("2. ingredients.csv - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")
    st.write("3. recipe_ingredients.csv - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")
    st.write("4. thai_dishes_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    st.write("5. ingredients_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    st.write("6. recipe_ingredients_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    
    st.write("## ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.write("1. ‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡πÉ‡∏ä‡πâ Gemini API' ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    st.write("2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'")
    st.write("3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Data Dictionary")
    st.write("4. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'")
    st.write("5. ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Gemini API ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤")
    
    # Add example questions
    st.write("## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    st.write("- ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?")
    st.write("- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4 ‡∏Ñ‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÉ‡∏™?")
    st.write("- ‡πÅ‡∏Å‡∏á‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Gemini API)")

# Run the app
if __name__ == "__main__":
    st.sidebar.markdown("---")
    st.sidebar.info("‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ Gemini API ‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Gemini API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    if st.session_state.file_uploaded:
        st.sidebar.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(st.session_state.dataframes) + len(st.session_state.data_dicts)} ‡πÑ‡∏ü‡∏•‡πå")
        st.sidebar.markdown("**‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
        for filename in st.session_state.dataframes.keys():
            st.sidebar.markdown(f"- {filename}")
        
        if st.session_state.data_dicts:
            st.sidebar.markdown("**‡πÑ‡∏ü‡∏•‡πå Data Dictionary:**")
            for filename in st.session_state.data_dicts.keys():
                st.sidebar.markdown(f"- {filename}")
    else:
        st.sidebar.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
