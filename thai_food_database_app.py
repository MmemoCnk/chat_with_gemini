import streamlit as st
import pandas as pd
import os
import json
import re
from io import StringIO
import google.generativeai as genai
import glob

st.set_page_config(
    page_title="Thai Food Chatbot with Gemini",
    page_icon="üçú",
    layout="wide"
)

# Hard-coded Gemini API key - ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà API key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE"  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API key ‡∏à‡∏£‡∏¥‡∏á

# Initialize session state for storing dataframes
if 'dataframes' not in st.session_state:
    st.session_state.dataframes = {}
if 'data_dicts' not in st.session_state:
    st.session_state.data_dicts = {}
if 'file_uploaded' not in st.session_state:
    st.session_state.file_uploaded = False
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'api_key_set' not in st.session_state:
    st.session_state.api_key_set = False

# Function to initialize Gemini API
def initialize_gemini_api(api_key):
    try:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ API key
        genai.configure(api_key=api_key)
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á model
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        return model, True
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡πÑ‡∏î‡πâ: {str(e)}")
        return None, False

# Function to determine if file is a data dictionary
def is_data_dict(filename):
    return 'data_dict' in filename

# Function to load CSV files from directories
def load_csv_from_directories():
    loaded_files = 0
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data_dict
    if os.path.exists("csv/data_dict"):
        csv_files = glob.glob("csv/data_dict/*.csv")
        for file_path in csv_files:
            try:
                filename = os.path.basename(file_path)
                df = pd.read_csv(file_path, encoding='utf-8', on_bad_lines='skip', low_memory=False)
                st.session_state.data_dicts[filename] = df
                loaded_files += 1
                st.sidebar.success(f"‡πÇ‡∏´‡∏•‡∏î Data Dictionary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
            except Exception as e:
                st.sidebar.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏î‡πâ: {str(e)}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå database
    if os.path.exists("csv/database"):
        csv_files = glob.glob("csv/database/*.csv")
        for file_path in csv_files:
            try:
                filename = os.path.basename(file_path)
                df = pd.read_csv(file_path, encoding='utf-8', on_bad_lines='skip', low_memory=False)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß
                for col in df.columns:
                    try:
                        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô string
                        df[col] = pd.to_numeric(df[col], errors='ignore')
                    except:
                        pass
                        
                st.session_state.dataframes[filename] = df
                loaded_files += 1
                st.sidebar.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
            except Exception as e:
                st.sidebar.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏î‡πâ: {str(e)}")
    
    return loaded_files > 0

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
def create_test_data():
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
    dishes_data = {
        'dish_id': [1, 2, 3],
        'dish_name': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢'],
        'dish_type': ['‡∏ï‡πâ‡∏°', '‡πÅ‡∏Å‡∏á', '‡∏ú‡∏±‡∏î'],
        'description': [
            '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏ú‡πá‡∏î ‡∏´‡∏≠‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£ ‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å',
            '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡∏á‡∏Å‡∏∞‡∏ó‡∏¥‡∏£‡∏™‡πÄ‡∏ú‡πá‡∏î‡∏´‡∏ß‡∏≤‡∏ô ‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô ‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏™‡πà‡πÑ‡∏Å‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ',
            '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ú‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô ‡∏°‡∏µ‡πÑ‡∏Ç‡πà ‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏∏‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏π'
        ]
    }
    dishes_df = pd.DataFrame(dishes_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
    ingredients_data = {
        'ingredient_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'ingredient_name': ['‡∏Å‡∏∏‡πâ‡∏á', '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏ú‡∏≤', '‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π', '‡∏Ç‡πà‡∏≤', 
                            '‡πÑ‡∏Å‡πà', '‡∏Å‡∏∞‡∏ó‡∏¥', '‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á', '‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î', '‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢'],
        'calories_per_100g': [100, 200, 5, 40, 60, 120, 230, 180, 30, 350],
        'price_per_unit': [300, 80, 20, 100, 50, 80, 60, 90, 20, 40],
        'unit': ['‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Ç‡∏ß‡∏î', '‡∏Ç‡∏ß‡∏î', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 
                '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á', '‡∏Ç‡∏ß‡∏î', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°']
    }
    ingredients_df = pd.DataFrame(ingredients_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    recipe_data = {
        'dish_id': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3],
        'ingredient_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 10, 1, 3, 4, 2, 7],
        'amount': [300, 2, 3, 5, 50, 500, 400, 3, 5, 3, 200, 100, 2, 2, 2, 100],
        'unit': ['‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÄ‡∏°‡πá‡∏î', '‡∏Å‡∏£‡∏±‡∏°', 
                '‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÉ‡∏ö', '‡πÄ‡∏°‡πá‡∏î', 
                '‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏±‡∏°', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡πÄ‡∏°‡πá‡∏î', '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞', '‡∏Å‡∏£‡∏±‡∏°'],
        'notes': ['‡∏™‡∏î', '', '', '‡∏™‡∏î', '‡∏´‡∏±‡πà‡∏ô‡πÅ‡∏ß‡πà‡∏ô', '‡∏´‡∏±‡πà‡∏ô‡∏ä‡∏¥‡πâ‡∏ô', '', '', '‡∏â‡∏µ‡∏Å', '', '‡πÅ‡∏ä‡πà‡∏ô‡πâ‡∏≥', '‡∏õ‡∏≠‡∏Å‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å', '', '‡∏ö‡∏∏‡∏ö', '', '']
    }
    recipe_df = pd.DataFrame(recipe_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    cooking_steps_data = {
        'dish_id': [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3],
        'step_number': [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5],
        'instruction': [
            '‡∏ï‡∏±‡πâ‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏î', 
            '‡πÉ‡∏™‡πà‡∏Ç‡πà‡∏≤ ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ ‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î', 
            '‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡∏•‡∏á‡πÑ‡∏õ‡∏ï‡πâ‡∏°‡∏à‡∏ô‡∏™‡∏∏‡∏Å', 
            '‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤ ‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß ‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏ú‡∏≤',
            '‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏∞‡∏ó‡∏¥‡∏à‡∏ô‡∏´‡∏≠‡∏°',
            '‡πÉ‡∏™‡πà‡πÑ‡∏Å‡πà‡∏ú‡∏±‡∏î‡∏à‡∏ô‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏™‡∏∏‡∏Å',
            '‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏∞‡∏ó‡∏¥ ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤ ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
            '‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å ‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î ‡πÄ‡∏Ñ‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏ô‡∏™‡∏∏‡∏Å',
            '‡πÅ‡∏ä‡πà‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô‡∏à‡∏ô‡∏ô‡∏¥‡πà‡∏°',
            '‡∏ú‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô',
            '‡∏ï‡∏≠‡∏Å‡πÑ‡∏Ç‡πà‡∏•‡∏á‡πÑ‡∏õ‡∏ú‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å',
            '‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤ ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',
            '‡πÉ‡∏™‡πà‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å ‡πÉ‡∏ö‡∏Å‡∏∏‡∏¢‡∏ä‡πà‡∏≤‡∏¢ ‡∏ú‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô'
        ]
    }
    cooking_steps_df = pd.DataFrame(cooking_steps_data)
    
    return dishes_df, ingredients_df, recipe_df, cooking_steps_df

# Function to generate prompt for Gemini
def generate_gemini_prompt(question, dataframes):
    # Extract all dataframes
    dishes_df = dataframes.get('dishes_df')
    ingredients_df = dataframes.get('ingredients_df')
    recipe_df = dataframes.get('recipe_df')
    cooking_steps_df = dataframes.get('cooking_steps_df', None)
    
    prompt = """
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤:

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:

1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (dishes_df):
{dishes_data}

2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (ingredients_df):
{ingredients_data}

3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (recipe_df):
{recipe_data}
"""

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if cooking_steps_df is not None:
        prompt += """
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (cooking_steps_df):
{cooking_steps_data}
"""
        prompt = prompt.format(
            question=question,
            dishes_data=dishes_df.to_string() if dishes_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            ingredients_data=ingredients_df.to_string() if ingredients_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            recipe_data=recipe_df.to_string() if recipe_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            cooking_steps_data=cooking_steps_df.to_string() if cooking_steps_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        )
    else:
        prompt = prompt.format(
            question=question,
            dishes_data=dishes_df.to_string() if dishes_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            ingredients_data=ingredients_df.to_string() if ingredients_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            recipe_data=recipe_df.to_string() if recipe_df is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        )
    
    prompt += """
‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
1. ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
2. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà, ‡∏£‡∏≤‡∏Ñ‡∏≤) ‡πÉ‡∏´‡πâ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡πâ‡∏ß‡∏¢
3. ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
4. ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
5. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠
"""
    
    return prompt

# Function to get response from Gemini
def get_gemini_response(model, question, dataframes):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
        prompt = generate_gemini_prompt(question, dataframes)
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini API
        response = model.generate_content(prompt)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        return response.text
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini API: {str(e)}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï"

# Main title
st.title("üçú Thai Food Chatbot with Gemini")

# Sidebar for file upload and options
with st.sidebar:
    st.header("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Gemini API")
    
    # ‡πÉ‡∏ä‡πâ Hard-coded API Key ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
    if GEMINI_API_KEY != "YOUR_GEMINI_API_KEY_HERE":
        # Initialize Gemini API with hard-coded key
        gemini_model, success = initialize_gemini_api(GEMINI_API_KEY)
        if success:
            st.session_state.gemini_model = gemini_model
            st.session_state.api_key_set = True
            st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            st.session_state.api_key_set = False
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key")
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Gemini API Key ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ GEMINI_API_KEY")
    
    st.header("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô folder csv/data_dict ‡πÅ‡∏•‡∏∞ csv/database ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    has_csv_folders = (os.path.exists("csv/data_dict") or os.path.exists("csv/database"))
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ folder csv ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if has_csv_folders:
        if st.button("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"):
            loaded = load_csv_from_directories()
            if loaded:
                st.session_state.file_uploaded = True
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô csv/data_dict ‡∏´‡∏£‡∏∑‡∏≠ csv/database")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv/data_dict ‡∏´‡∏£‡∏∑‡∏≠ csv/database ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô")
    
    # ‡∏Ñ‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    st.header("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    uploaded_files = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV", type="csv", accept_multiple_files=True)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    use_sample_data = st.checkbox("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
    
    if use_sample_data:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
        dishes_df, ingredients_df, recipe_df, cooking_steps_df = create_test_data()
        st.session_state.dataframes = {
            'thai_dishes.csv': dishes_df,
            'ingredients.csv': ingredients_df,
            'recipe_ingredients.csv': recipe_df,
            'cooking_steps.csv': cooking_steps_df
        }
        st.session_state.file_uploaded = True
        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    elif uploaded_files:
        for file in uploaded_files:
            try:
                # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                df = pd.read_csv(
                    file,
                    encoding='utf-8',  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô UTF-8
                    on_bad_lines='skip',  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                    low_memory=False,  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ low memory
                    dtype=str  # ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô
                )
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß
                for col in df.columns:
                    try:
                        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô string
                        df[col] = pd.to_numeric(df[col], errors='ignore')
                    except:
                        pass
                
                if is_data_dict(file.name):
                    st.session_state.data_dicts[file.name] = df
                    st.success(f"‡πÇ‡∏´‡∏•‡∏î Data Dictionary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file.name}")
                else:
                    st.session_state.dataframes[file.name] = df
                    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file.name}")
                    
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file.name}: {str(e)}")
                st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô...")
                
                try:
                    # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô CSV ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
                    stringio = StringIO(file.getvalue().decode("utf-8"))
                    lines = stringio.read().splitlines()
                    header = lines[0].split(",")
                    
                    data = []
                    for line in lines[1:]:
                        if line.strip():  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
                            values = line.split(",")
                            if len(values) == len(header):
                                data.append(values)
                    
                    df = pd.DataFrame(data, columns=header)
                    
                    if is_data_dict(file.name):
                        st.session_state.data_dicts[file.name] = df
                        st.success(f"‡πÇ‡∏´‡∏•‡∏î Data Dictionary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2): {file.name}")
                    else:
                        st.session_state.dataframes[file.name] = df
                        st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2): {file.name}")
                        
                except Exception as e2:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file.name} ‡πÑ‡∏î‡πâ: {str(e2)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        required_files = ['thai_dishes', 'ingredients', 'recipe_ingredients']
        has_all_required = True
        
        for req in required_files:
            found = False
            for filename in st.session_state.dataframes.keys():
                if req in filename:
                    found = True
                    break
            if not found:
                has_all_required = False
                st.warning(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {req}.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
        
        if has_all_required:
            st.session_state.file_uploaded = True
        else:
            st.session_state.file_uploaded = False

# Main content - Chat interface
if st.session_state.file_uploaded:
    # Get DataFrames
    dishes_df = None
    ingredients_df = None
    recipe_df = None
    cooking_steps_df = None
    
    for filename, df in st.session_state.dataframes.items():
        if isinstance(filename, str) and 'thai_dishes' in filename.lower():
            dishes_df = df
        elif isinstance(filename, str) and 'ingredients' in filename.lower() and 'recipe' not in filename.lower():
            ingredients_df = df
        elif isinstance(filename, str) and 'recipe' in filename.lower():
            recipe_df = df
        elif isinstance(filename, str) and ('cooking' in filename.lower() or 'steps' in filename.lower()):
            cooking_steps_df = df
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if dishes_df is None or ingredients_df is None or recipe_df is None:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        st.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (thai_dishes): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if dishes_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (ingredients): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if ingredients_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏° (recipe_ingredients): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß' if recipe_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö'}")
        st.write(f"- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥ (cooking_steps): {'‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)' if cooking_steps_df is not None else '‡πÑ‡∏°‡πà‡∏û‡∏ö (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)'}")
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        st.write("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
        for filename in st.session_state.dataframes.keys():
            st.write(f"- {filename}")
    else:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Gemini API key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not st.session_state.api_key_set:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Gemini API Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ GEMINI_API_KEY ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î")
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° dataframes ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        all_dataframes = {
            'dishes_df': dishes_df,
            'ingredients_df': ingredients_df,
            'recipe_df': recipe_df
        }
        
        if cooking_steps_df is not None:
            all_dataframes['cooking_steps_df'] = cooking_steps_df
        
        # Display chat interface
        st.header("‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢")
        
        # Display chat history
        chat_container = st.container()
        with chat_container:
            for i, (q, a) in enumerate(st.session_state.chat_history):
                st.markdown(f"**‡∏Ñ‡∏∏‡∏ì**: {q}")
                st.markdown(f"**‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó**: {a}")
                if i < len(st.session_state.chat_history) - 1:
                    st.markdown("---")
        
        # Input for new question
        with st.form(key="question_form"):
            question = st.text_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢:", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á, ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢, ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4 ‡∏Ñ‡∏ô")
            submit_button = st.form_submit_button("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
            
            if submit_button and question:
                # Get response
                if st.session_state.api_key_set and 'gemini_model' in st.session_state:
                    # ‡πÉ‡∏ä‡πâ Gemini API
                    response = get_gemini_response(st.session_state.gemini_model, question, all_dataframes)
                else:
                    response = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î Gemini API Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î (‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ GEMINI_API_KEY) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ"
                
                # Add to chat history
                st.session_state.chat_history.append((question, response))
                
                # Rerun to update chat display
                st.rerun()
        
        # Add option to clear chat history
        if st.button("‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"):
            st.session_state.chat_history = []
            st.rerun()

        # Add export chat history
        if st.download_button(
            label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
            data="\n\n".join([f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {q}\n\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {a}" for q, a in st.session_state.chat_history]),
            file_name="thai_food_chat_history.txt",
            mime="text/plain"
        ):
            st.success("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó")
    
    if os.path.exists("csv/data_dict") or os.path.exists("csv/database"):
        st.write("üìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv/data_dict ‡∏´‡∏£‡∏∑‡∏≠ csv/database ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
    
    st.write("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
    st.write("1. thai_dishes.csv - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢")
    st.write("2. ingredients.csv - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")
    st.write("3. recipe_ingredients.csv - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")
    st.write("4. cooking_steps.csv - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    st.write("5. thai_dishes_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    st.write("6. ingredients_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    st.write("7. recipe_ingredients_data_dict.csv - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")
    
    st.write("## ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.write("1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
    st.write("2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
    st.write("3. ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    st.write("4. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'")
    st.write("5. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # Add example questions
    st.write("## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    st.write("- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?")
    st.write("- ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?")
    st.write("- ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?")
    st.write("- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4 ‡∏Ñ‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡πÅ‡∏Å‡∏á‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
    st.write("- ‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á?")
    st.write("- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á")
    st.write("- ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?")

# Run the app
if __name__ == "__main__":
    st.sidebar.markdown("---")
    st.sidebar.info("‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Gemini API ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    if st.session_state.file_uploaded:
        st.sidebar.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(st.session_state.dataframes) + len(st.session_state.data_dicts)} ‡πÑ‡∏ü‡∏•‡πå")
        st.sidebar.markdown("**‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
        for filename in st.session_state.dataframes.keys():
            st.sidebar.markdown(f"- {filename}")
        
        if st.session_state.data_dicts:
            st.sidebar.markdown("**‡πÑ‡∏ü‡∏•‡πå Data Dictionary:**")
            for filename in st.session_state.data_dicts.keys():
                st.sidebar.markdown(f"- {filename}")
    else:
        st.sidebar.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå csv ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
